// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2017 21:33:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] entradaA;
reg [7:0] entradaB;
reg [2:0] Operacao;
// wires                                               
wire [7:0] saida;
wire zero;

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.entradaA(entradaA),
	.entradaB(entradaB),
	.Operacao(Operacao),
	.saida(saida),
	.zero(zero)
);
initial 
begin 
#16000 $finish;
end 
// entradaA[ 7 ]
initial
begin
	entradaA[7] = 1'b0;
end 
// entradaA[ 6 ]
initial
begin
	entradaA[6] = 1'b0;
end 
// entradaA[ 5 ]
initial
begin
	entradaA[5] = 1'b0;
end 
// entradaA[ 4 ]
initial
begin
	entradaA[4] = 1'b0;
end 
// entradaA[ 3 ]
always
begin
	entradaA[3] = 1'b0;
	entradaA[3] = #8000 1'b1;
	#8000;
end 
// entradaA[ 2 ]
always
begin
	entradaA[2] = 1'b0;
	entradaA[2] = #4000 1'b1;
	#4000;
end 
// entradaA[ 1 ]
always
begin
	entradaA[1] = 1'b0;
	entradaA[1] = #2000 1'b1;
	#2000;
end 
// entradaA[ 0 ]
always
begin
	entradaA[0] = 1'b0;
	entradaA[0] = #1000 1'b1;
	#1000;
end 
// entradaB[ 7 ]
initial
begin
	entradaB[7] = 1'b1;
end 
// entradaB[ 6 ]
initial
begin
	entradaB[6] = 1'b1;
end 
// entradaB[ 5 ]
initial
begin
	entradaB[5] = 1'b1;
end 
// entradaB[ 4 ]
initial
begin
	entradaB[4] = 1'b1;
end 
// entradaB[ 3 ]
initial
begin
	entradaB[3] = 1'b1;
	entradaB[3] = #8000 1'b0;
end 
// entradaB[ 2 ]
initial
begin
	entradaB[2] = 1'b1;
	entradaB[2] = #4000 1'b0;
	entradaB[2] = #4000 1'b1;
	entradaB[2] = #4000 1'b0;
end 
// entradaB[ 1 ]
initial
begin
	entradaB[1] = 1'b1;
	entradaB[1] = #2000 1'b0;
	# 2000;
	repeat(2)
	begin
		entradaB[1] = 1'b1;
		entradaB[1] = #2000 1'b0;
		# 2000;
	end
	entradaB[1] = 1'b1;
	entradaB[1] = #2000 1'b0;
end 
// entradaB[ 0 ]
initial
begin
	entradaB[0] = 1'b1;
	entradaB[0] = #1000 1'b0;
	# 1000;
	repeat(6)
	begin
		entradaB[0] = 1'b1;
		entradaB[0] = #1000 1'b0;
		# 1000;
	end
	entradaB[0] = 1'b1;
	entradaB[0] = #1000 1'b0;
end 
// Operacao[ 2 ]
always
begin
	Operacao[2] = 1'b0;
	Operacao[2] = #4000 1'b1;
	#4000;
end 
// Operacao[ 1 ]
always
begin
	Operacao[1] = 1'b0;
	Operacao[1] = #2000 1'b1;
	#2000;
end 
// Operacao[ 0 ]
always
begin
	Operacao[0] = 1'b0;
	Operacao[0] = #1000 1'b1;
	#1000;
end 
endmodule

